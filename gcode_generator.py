"""
G-Code generator for the G2burn Laser Engraving Application.
This module handles the generation of G-Code from drawing objects.
"""

import tkinter as tk
from tkinter import filedialog, messagebox


class GCodeGenerator:
    """Generates G-Code from drawing objects for laser engraving."""
    
    def __init__(self, canvas, sketching_stage):
        """Initialize the G-Code generator.
        
        Args:
            canvas (tk.Canvas): The canvas containing drawing objects
            sketching_stage (SketchingStage): Reference to the sketching stage
        """
        self.canvas = canvas
        self.sketching_stage = sketching_stage
        
        # G-Code settings
        self.feed_rate = 1000  # mm/min
        self.laser_power = 255  # 0-255 or 0-1000 depending on controller
        self.travel_speed = 3000  # mm/min for rapid moves
        
    def generate_gcode(self):
        """Generate G-Code from the current drawing objects.
        
        Returns:
            list: List of G-Code command strings
        """
        # G-Code header
        gcode_lines = self._generate_header()
        
        # Process each drawing object
        for drawing_obj in self.sketching_stage.drawing_objects:
            obj_type = drawing_obj['type']
            real_coords = drawing_obj['real_coords']
            
            if obj_type == 'line':
                gcode_lines.extend(self._generate_line_gcode(real_coords))
            elif obj_type == 'rectangle':
                gcode_lines.extend(self._generate_rectangle_gcode(real_coords))
                
        # G-Code footer
        gcode_lines.extend(self._generate_footer())
        
        return gcode_lines
        
    def _generate_header(self):
        """Generate G-Code header.
        
        Returns:
            list: Header G-Code lines
        """
        header = [
            "; G-code generated by G2burn Laser Engraver",
            f"; Project: {self.sketching_stage.project_name}",
            f"; Workspace: {self.sketching_stage.length_mm}mm x {self.sketching_stage.height_mm}mm",
            f"; Generated on: {self._get_timestamp()}",
            ";",
            "G21 ; Set units to millimeters",
            "G90 ; Absolute positioning", 
            "G28 ; Home all axes",
            "M3 S0 ; Initialize laser (off)",
            "G0 X0 Y0 ; Move to origin",
            ";"
        ]
        return header
        
    def _generate_footer(self):
        """Generate G-Code footer.
        
        Returns:
            list: Footer G-Code lines
        """
        footer = [
            ";",
            "M5 ; Laser off",
            "G0 X0 Y0 ; Return to origin", 
            "M30 ; Program end"
        ]
        return footer
        
    def _generate_line_gcode(self, coords):
        """Generate G-Code for a line.
        
        Args:
            coords (list): [x1, y1, x2, y2] in mm
            
        Returns:
            list: G-Code lines for the line
        """
        x1, y1, x2, y2 = coords
        
        lines = [
            f"; Line from ({x1:.3f}, {y1:.3f}) to ({x2:.3f}, {y2:.3f})",
            f"G0 X{x1:.3f} Y{y1:.3f} F{self.travel_speed} ; Move to start",
            f"M3 S{self.laser_power} ; Laser on",
            f"G1 X{x2:.3f} Y{y2:.3f} F{self.feed_rate} ; Cut to end",
            "M5 ; Laser off",
            ""
        ]
        return lines
        
    def _generate_rectangle_gcode(self, coords):
        """Generate G-Code for a rectangle.
        
        Args:
            coords (list): [x1, y1, x2, y2] in mm
            
        Returns:
            list: G-Code lines for the rectangle
        """
        x1, y1, x2, y2 = coords
        
        # Ensure we have the correct corner order
        min_x, max_x = min(x1, x2), max(x1, x2)
        min_y, max_y = min(y1, y2), max(y1, y2)
        
        lines = [
            f"; Rectangle from ({min_x:.3f}, {min_y:.3f}) to ({max_x:.3f}, {max_y:.3f})",
            f"G0 X{min_x:.3f} Y{min_y:.3f} F{self.travel_speed} ; Move to corner 1",
            f"M3 S{self.laser_power} ; Laser on",
            f"G1 X{max_x:.3f} Y{min_y:.3f} F{self.feed_rate} ; Cut to corner 2",
            f"G1 X{max_x:.3f} Y{max_y:.3f} F{self.feed_rate} ; Cut to corner 3", 
            f"G1 X{min_x:.3f} Y{max_y:.3f} F{self.feed_rate} ; Cut to corner 4",
            f"G1 X{min_x:.3f} Y{min_y:.3f} F{self.feed_rate} ; Cut back to corner 1",
            "M5 ; Laser off",
            ""
        ]
        return lines
        
    def _get_timestamp(self):
        """Get current timestamp for G-Code header.
        
        Returns:
            str: Formatted timestamp
        """
        from datetime import datetime
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
    def generate_and_show(self):
        """Generate G-Code and show it in a popup window."""
        # Generate G-Code
        gcode_lines = self.generate_gcode()
        
        if not self.sketching_stage.drawing_objects:
            gcode_lines.insert(-4, "; No drawing objects found")
            
        # Show G-Code in a new window
        self._show_gcode_window(gcode_lines)
        
    def _show_gcode_window(self, gcode_lines):
        """Show G-Code in a popup window.
        
        Args:
            gcode_lines (list): List of G-Code command strings
        """
        # Create popup window
        gcode_window = tk.Toplevel(self.sketching_stage.window)
        gcode_window.title("Generated G-Code")
        gcode_window.geometry("600x500")
        
        # Center the window
        gcode_window.transient(self.sketching_stage.window)
        
        # Create frame for buttons
        button_frame = tk.Frame(gcode_window)
        button_frame.pack(fill=tk.X, padx=10, pady=(10, 0))
        
        # Statistics label
        stats_text = f"Lines: {len(gcode_lines)} | Objects: {len(self.sketching_stage.drawing_objects)}"
        stats_label = tk.Label(button_frame, text=stats_text, font=("Arial", 9))
        stats_label.pack(side=tk.LEFT)
        
        # Save button
        save_btn = tk.Button(
            button_frame,
            text="Save G-Code",
            command=lambda: self._save_gcode_to_file(gcode_lines),
            font=("Arial", 10),
            padx=15
        )
        save_btn.pack(side=tk.RIGHT, padx=5)
        
        # Copy button
        copy_btn = tk.Button(
            button_frame,
            text="Copy to Clipboard",
            command=lambda: self._copy_to_clipboard(gcode_lines, gcode_window),
            font=("Arial", 10),
            padx=15
        )
        copy_btn.pack(side=tk.RIGHT, padx=5)
        
        # Create frame for text widget and scrollbar
        text_frame = tk.Frame(gcode_window)
        text_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Create text widget
        text_widget = tk.Text(
            text_frame,
            wrap=tk.NONE,
            font=("Courier", 10),
            bg="white",
            fg="black"
        )
        
        # Create scrollbars
        v_scrollbar = tk.Scrollbar(text_frame, orient=tk.VERTICAL, command=text_widget.yview)
        h_scrollbar = tk.Scrollbar(text_frame, orient=tk.HORIZONTAL, command=text_widget.xview)
        
        # Configure text widget scrolling
        text_widget.config(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # Pack scrollbars and text widget
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)
        text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # Insert G-Code text
        gcode_text = "\n".join(gcode_lines)
        text_widget.insert(tk.END, gcode_text)
        
        # Make text widget read-only
        text_widget.config(state=tk.DISABLED)
        
        # Add syntax highlighting
        self._apply_gcode_highlighting(text_widget, gcode_lines)
        
    def _apply_gcode_highlighting(self, text_widget, gcode_lines):
        """Apply basic syntax highlighting to G-Code.
        
        Args:
            text_widget (tk.Text): Text widget to highlight
            gcode_lines (list): List of G-Code lines
        """
        # Configure text tags for highlighting
        text_widget.tag_configure("comment", foreground="green")
        text_widget.tag_configure("gcode", foreground="blue", font=("Courier", 10, "bold"))
        text_widget.tag_configure("mcode", foreground="red", font=("Courier", 10, "bold"))
        
        # Apply highlighting
        for line_num, line in enumerate(gcode_lines, 1):
            line_start = f"{line_num}.0"
            line_end = f"{line_num}.end"
            
            if line.strip().startswith(';'):
                # Comment line
                text_widget.tag_add("comment", line_start, line_end)
            elif line.strip().startswith('G'):
                # G-Code command
                text_widget.tag_add("gcode", line_start, line_end)
            elif line.strip().startswith('M'):
                # M-Code command
                text_widget.tag_add("mcode", line_start, line_end)
                
    def _save_gcode_to_file(self, gcode_lines):
        """Save G-Code to a file.
        
        Args:
            gcode_lines (list): List of G-Code command strings
        """
        file_path = filedialog.asksaveasfilename(
            title="Save G-Code",
            defaultextension=".gcode",
            filetypes=[
                ("G-code files", "*.gcode"),
                ("NC files", "*.nc"),
                ("Text files", "*.txt"),
                ("All files", "*.*")
            ],
            initialfile=f"{self.sketching_stage.project_name}.gcode"
        )
        
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write("\n".join(gcode_lines))
                messagebox.showinfo("G-Code Saved", f"G-Code saved to:\n{file_path}")
            except Exception as e:
                messagebox.showerror("Save Error", f"Failed to save G-Code:\n{str(e)}")
                
    def _copy_to_clipboard(self, gcode_lines, window):
        """Copy G-Code to clipboard.
        
        Args:
            gcode_lines (list): List of G-Code command strings
            window (tk.Toplevel): Window to show confirmation in
        """
        try:
            gcode_text = "\n".join(gcode_lines)
            window.clipboard_clear()
            window.clipboard_append(gcode_text)
            window.update()  # Required for clipboard operation
            
            # Show temporary confirmation
            confirm_label = tk.Label(window, text="Copied to clipboard!", fg="green")
            confirm_label.pack()
            window.after(2000, confirm_label.destroy)  # Remove after 2 seconds
            
        except Exception as e:
            messagebox.showerror("Copy Error", f"Failed to copy to clipboard:\n{str(e)}")
            
    def set_laser_settings(self, feed_rate=None, laser_power=None, travel_speed=None):
        """Update laser settings.
        
        Args:
            feed_rate (int, optional): Feed rate in mm/min
            laser_power (int, optional): Laser power (0-255 or 0-1000)
            travel_speed (int, optional): Travel speed in mm/min
        """
        if feed_rate is not None:
            self.feed_rate = feed_rate
        if laser_power is not None:
            self.laser_power = laser_power
        if travel_speed is not None:
            self.travel_speed = travel_speed
            
    def get_laser_settings(self):
        """Get current laser settings.
        
        Returns:
            dict: Current laser settings
        """
        return {
            'feed_rate': self.feed_rate,
            'laser_power': self.laser_power,
            'travel_speed': self.travel_speed
        }
